generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Store {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards Billboard[]
  categories Category[]
  sizes      Size[]
  colors     Color[]
  products   Product[]
  orders     Order[]
}

model Billboard {
  id        String   @id @default(uuid())
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories Category[]

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
}

model Size {
  id        String    @id @default(uuid())
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])
}

model Color {
  id        String    @id @default(uuid())
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])
}

model Product {
  id         String      @id @default(uuid())
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  images     Image[]
  orderItems OrderItem[]

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  sizeId String
  size   Size   @relation(fields: [sizeId], references: [id])

  colorId String
  color   Color  @relation(fields: [colorId], references: [id])
}

model Image {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id         String      @id @default(uuid())
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])
}

model OrderItem {
  id String @id @default(uuid())

  productId String
  product   Product @relation(fields: [productId], references: [id])

  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id])
}
